{
  "项目路径": "E:\\程序\\xiangmu\\mcgx",
  "分析时间": "2025-08-15 20:06:11",
  "项目概览": {
    "文件总数": 37,
    "Python文件数": 20,
    "目录结构": "包含mcgx核心模块、UI界面、工具类等",
    "项目类型": "Python GUI应用程序"
  },
  "技术栈": {
    "主要框架": "PyQt5",
    "核心依赖": [
      "PyQt5",
      "psutil",
      "win32api"
    ],
    "系统功能": "系统监控、进程管理、注册表操作等"
  },
  "代码统计": {
    "Python文件": 20,
    "函数总数": 245,
    "类总数": 28,
    "平均每文件函数数": 12.2
  },
  "模块结构": {
    "mcgx": "核心功能模块",
    "ui": "用户界面模块",
    "resources": "资源文件",
    "utils": "工具类模块"
  },
  "关键文件内容": {
    "README.md": "# 系统安全分析工具\n\n## 简介\n\n本项目是一款功能强大的Windows系统安全分析工具，类似于火绒剑独立版。该工具可以帮助用户深入了解系统运行状态，检测恶意软件，优化系统性能，甚至进行逆向工程分析。\n\n## 核心功能\n\n### 1. 进程与线程管理\n- 进程查看：列出系统中所有正在运行的进程，显示进程的 PID、CPU 占用、内存占用等详细信息\n- 线程查看：支持查看每个进程的线程信息，包括线程 ID、优先级、状态等\n- 进程操作：用户可以终止、挂起或恢复指定进程，快速处理异常程序或恶意软件\n\n### 2. 行为监控\n- 文件操作监控：实时监控文件的创建、修改、删除等操作，记录操作的具体路径和时间\n- 注册表监控：监控注册表的读写操作，帮助用户分析程序对注册表的修改行为\n- 网络行为监控：记录程序的网络连接行为，包括连接的远程地址、端口和协议类型\n\n### 3. 启动项管理\n- 启动项查看：列出系统中的所有启动项，包括注册表启动项、服务启动项、计划任务等\n- 启动项编辑：支持禁用或删除不必要的启动项，优化系统启动速度\n- 可疑启动项检测：自动标记可疑的启动项，帮助用户识别潜在的恶意软件\n\n### 4. 内核模块分析\n- 驱动模块查看：列出系统中加载的所有内核驱动模块，显示模块的名称、路径、加载时间等信息\n- 模块详细信息：支持查看每个模块的导出函数、依赖关系等详细信息\n- 可疑模块检测：自动检测并标记可疑的内核模块，帮助用户识别 Rootkit 等高级威胁\n\n### 5. 网络连接监控\n- 实时连接查看：显示当前系统的所有网络连接，包括 TCP 和 UDP 连接\n- 连接详细信息：显示每个连接的进程 ID、本地地址、远程地址、端口和协议类型\n- 网络行为分析：帮助用户识别异常的网络活动，如恶意软件的远程控制行为\n\n## 适用场景\n\n### 安全分析\n- 检测和分析恶意软件的行为，识别系统中的安全威胁\n- 监控系统的文件和注册表操作，追踪恶意软件的痕迹\n\n### 系统优化\n- 管理系统的启动项，禁用不必要的程序，提升系统启动速度\n- 监控系统的进程和网络连接，优化系统性能\n\n### 逆向工程\n- 监控程序的行为，分析其内部逻辑和运行机制\n- 通过行为日志和痕迹分析，研究恶意软件的工作原理\n\n### 故障排查\n- 诊断系统问题，修复异常行为\n- 分析系统崩溃的原因，定位问题根源\n\n## 特点\n\n### 轻量高效\n- 独立运行，无需安装，占用系统资源少\n- 界面简洁，操作流畅，适合长时间使用\n\n### 功能全面\n- 覆盖进程管理、行为监控、网络分析、启动项管理等多个领域\n- 提供详细的行为日志和痕迹分析功能，满足高级用户的需求\n\n### 易于使用\n- 界面设计直观，功能分类清晰，适合初学者快速上手\n- 提供详细的使用说明和帮助文档，降低学习成本\n\n### 完全免费\n- 无需付费即可使用全部功能，适合个人用户和小型团队\n- 无广告、无捆绑，用户体验纯净\n\n## 安装与使用\n\n1. 克隆或下载本项目代码\n2. 安装依赖包：\n   ```\n   pip install -r requirements.txt\n   ```\n3. 运行程序：\n   ```\n   python main.py\n   ```\n\n## 功能说明\n\n### 进程管理\n- 显示所有运行中的进程及其资源使用情况\n- 支持结束进程操作\n- 提供进程详细信息查看\n\n### 网络连接监控\n- 实时显示所有网络连接\n- 显示连接类型、本地地址、远程地址等信息\n- 关联进程信息\n\n### 启动项管理\n- 查看注册表启动项\n- 支持禁用和删除操作\n- 显示启动项详细信息\n\n### 注册表查看\n- 树形结构显示注册表项\n- 只读模式，确保系统安全\n- 支持展开子项查看\n\n### 文件监控\n- 模拟文件操作监控功能\n- 记录文件操作事件\n- 支持清空记录和查看详情\n\n### 弹窗拦截\n- 实时监控并拦截弹窗广告\n- 记录拦截的弹窗信息\n- 分析弹窗行为，识别可疑程序\n\n## 系统要求\n\n- Windows 7/8/10/11\n- Python 3.6 或更高版本\n- PyQt5\n- psutil\n\n## 项目结构\n\n```\n.\n├── main.py                 # 程序入口\n├── setup.py                # 安装配置文件\n├── requirements.txt        # 依赖列表\n├── README.md               # 项目说明文档\n├── app.log                 # 运行日志文件\n└── ui/                     # 界面模块目录\n    ├── main_\n...[内容过长已截断]...",
    "requirements.txt": "PyQt5==5.15.9\npsutil==5.9.5",
    "config.py": "import os\n\nclass Config:\n    # 应用程序配置\n    APP_NAME = \"系统安全分析工具\"\n    VERSION = \"1.0.0\"\n    AUTHOR = \"安全研究团队\"\n    \n    # 窗口配置\n    WINDOW_WIDTH = 1200\n    WINDOW_HEIGHT = 800\n    \n    # 日志配置\n    LOG_LEVEL = \"INFO\"\n    LOG_FILE = \"app.log\"\n    \n    # 刷新间隔配置（毫秒）\n    PROCESS_REFRESH_INTERVAL = 5000  # 进程刷新间隔，增加到5秒\n    NETWORK_REFRESH_INTERVAL = 5000  # 网络刷新间隔，增加到5秒\n    STARTUP_REFRESH_INTERVAL = 10000  # 启动项刷新间隔，增加到10秒\n    REGISTRY_REFRESH_INTERVAL = 10000  # 注册表刷新间隔，增加到10秒\n    FILE_MONITOR_REFRESH_INTERVAL = 5000  # 文件监控刷新间隔，增加到5秒\n    SYSTEM_INFO_REFRESH_INTERVAL = 30000  # 系统信息刷新间隔，增加到30秒\n    \n    # 数据限制配置\n    MAX_LOG_LINES = 1000  # 最大日志行数\n    MAX_DISPLAY_THREADS = 50  # 最大显示线程数，从20增加到50\n    MAX_KERNEL_MODULES = 100  # 最大内核模块数\n    MAX_PROCESSES_TO_DISPLAY = 200  # 最大显示进程数\n    MAX_STARTUP_ITEMS_TO_DISPLAY = 200  # 最大显示启动项数\n    MAX_NETWORK_CONNECTIONS_TO_DISPLAY = 200  # 最大显示网络连接数\n    \n    # 可疑检测配置\n    SUSPICIOUS_NAME_PATTERNS = [\n        \"temp\", \"tmp\", \"cache\", \"download\", \n        \"crack\", \"keygen\", \"patch\", \"hack\",\n        \"inject\", \"exploit\", \"backdoor\", \"trojan\"\n    ]\n    \n    # 文件监控配置\n    FILE_MONITOR_SIMULATION = True  # 是否使用模拟数据\n    \n    # 文件监控目录\n    MONITORED_DIRECTORIES = [\n        os.path.expanduser(\"~\\\\Desktop\"),\n        os.path.expanduser(\"~\\\\Downloads\"),\n        os.path.expanduser(\"~\\\\AppData\\\\Local\\\\Temp\")\n    ]\n    \n    # 导出配置\n    EXPORT_DEFAULT_PATH = os.path.expanduser(\"~/Documents\")\n    EXPORT_SUPPORTED_FORMATS = [\"txt\", \"csv\"]\n    \n    # 安全配置\n    CONFIRM_BEFORE_KILL_PROCESS = True\n    CONFIRM_BEFORE_DELETE_STARTUP = True\n    \n    # 网络监控配置\n    SUSPICIOUS_PORTS = [1337, 31337, 666, 6666, 667, 9999]\n    SUSPICIOUS_IP_RANGES = [\n        \"127.0.0.1\", \"0.0.0.0\", \"localhost\"\n    ]\n    \n    # UI配置\n    WINDOW_TITLE = APP_NAME\n    TABLE_ALTERNATING_ROW_COLORS = True\n    TABLE_SELECTION_BEHAVIOR = \"ROW\"  # ROW or CELL\n    \n    # 主题配置\n    THEME = \"default\"  # 默认主题\n    \n    # 性能优化配置\n    ENABLE_DELAYED_INITIALIZATION = True  # 启用延迟初始化\n    DELAYED_INIT_DELAY = 500  \n...[内容过长已截断]...",
    "constants.py": "\"\"\"\n应用常量定义文件\n\"\"\"\n\n# 应用基本信息\nAPP_NAME = \"系统安全分析工具\"\nAPP_VERSION = \"1.0.0\"\n\n# 功能支持状态\nFEATURE_SUPPORTED = \"supported\"\nFEATURE_UNSUPPORTED = \"unsupported\"\nFEATURE_UNKNOWN = \"unknown\"\n\n# 系统信息类型\nSYS_INFO_CPU = \"cpu\"\nSYS_INFO_MEMORY = \"memory\"\nSYS_INFO_DISK = \"disk\"\n\n# 错误消息\nERROR_DISK_USAGE_FAILED = \"无法获取磁盘信息\"\nERROR_CPU_USAGE_FAILED = \"无法获取CPU信息\"\nERROR_MEMORY_USAGE_FAILED = \"无法获取内存信息\"\n\n# 日志消息\nLOG_DISK_USAGE_UNSUPPORTED = \"检测到当前环境不支持磁盘使用情况获取功能\"\nLOG_DISK_USAGE_FAILED = \"无法获取磁盘信息\"\nLOG_SYSTEM_INFO_SUCCESS = \"系统信息获取成功\"",
    "main.py": "import sys\nimport logging\nfrom PyQt5.QtWidgets import QApplication\nfrom ui.main_window import MainWindow\nfrom config import Config\n\n# 配置日志\nlogging.basicConfig(\n    level=getattr(logging, Config.LOG_LEVEL),\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),\n        logging.StreamHandler()\n    ]\n)\n\nlogger = logging.getLogger(__name__)\n\ndef main():\n    try:\n        app = QApplication(sys.argv)\n        window = MainWindow()\n        window.show()\n        logger.info(f\"{Config.APP_NAME} v{Config.VERSION} 启动成功\")\n        sys.exit(app.exec_())\n    except Exception as e:\n        logger.error(f\"应用程序启动失败: {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()",
    "setup.py": "from setuptools import setup, find_packages\n\nsetup(\n    name=\"system-security-analyzer\",\n    version=\"1.0.0\",\n    author=\"Security Team\",\n    author_email=\"security@example.com\",\n    description=\"一款功能强大的Windows系统安全分析工具\",\n    long_description=open(\"README.md\", encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/example/system-security-analyzer\",\n    packages=find_packages(),\n    install_requires=[\n        \"PyQt5>=5.15.0\",\n        \"psutil>=5.9.0\"\n    ],\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    python_requires=\">=3.6\",\n    entry_points={\n        \"console_scripts\": [\n            \"security-analyzer=main:main\",\n        ],\n    },\n)"
  }
}